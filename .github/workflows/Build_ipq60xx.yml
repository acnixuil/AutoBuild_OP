#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ipq60xx

on:
  workflow_dispatch:

#定时触发开始编译
  #schedule:
  #- cron: 0 17 * * 1

env:
  REPO_URL: https://github.com/sdf8057/ipq6000
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./zn-m2/m2.config
  DIY_P1_SH: ./zn-m2/zn-m2-part1.sh
  DIY_P2_SH: ./zn-m2/zn-m2-part2.sh
  UPLOAD_RELEASE: true
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai
  FILE_NAME: ipq60xx
  PRODUCT_NAME: ipq60xx
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@main
    
    - name: 检查服务器状态
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        echo " 系统空间       类型   总数  已用  可用  使用率"
        df -Th
    
    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir      
    
    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        Author=$(git show -s --date=short --format="%an")
        Date=$(git show -s --date=short --format="%ci")
        Commit=$(git show -s --date=short --format="%s")
        Hash=$(git show -s --date=short --format="%H")
        echo "author=$Author" >> $GITHUB_ENV
        echo "date=$Date" >> $GITHUB_ENV
        echo "commit=$Commit" >> $GITHUB_ENV
        echo "hash=$Hash" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV

    - name: 加载软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 输出预编译信息
      run: |
        cd openwrt
        echo " 系统空间       类型  总数  已用  可用  使用率"
        df -hT $PWD
        echo
        echo "=========================================="
        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in
        echo
        echo
        echo "	      已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}
        echo
        echo "=========================================="
        echo
        echo
        echo "输出完整插件信息..."
        echo
        echo
        cat .config

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 整合固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s || (curl -k --data chat_id="${{ env.TELEGRAM_CHAT_ID }}" --data "text=😅 ${{env.PRODUCT_NAME}}-OpenWrt 固件编译失败 😅" "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage";exit 1)
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查可用容量
      if: (!cancelled())
      run: df -hT

    - name: 组织文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *kernel*
        rm -rf *.manifest
        rm -rf sha256sums
        rm -rf *rootfs*
        rm -rf profiles.json
        rm -rf *.buildinfo
        rm -rf package
        rm -rf *.itb
        sleep 2
        ls
        mv *.ubi openwrt_ipq60xx_factory.ubi
        mv *sysupgrade.bin openwrt_ipq60xx_sysupgrade.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成标签
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: ${{ env.DATE }} 「 ${{ env.FILE_NAME }} 」固件
        allowUpdates: true
        tag: ${{ env.TAG }}_${{ env.PRODUCT_NAME }}
        token: ${{ secrets.G_TOKEN }}
        body: |
          - 🔖 此为 ${{ env.FILE_NAME }} 固件
          - 🔖 默认IP：192.168.2.1 默认密码：password
          - 🔖 感谢源码作者无私分享！
          - 🔖 时间: ${{ env.date }}
          - 🔖 hash: ${{ env.hash }}
        artifacts: ${{ env.FIRMWARE }}/*
        
    - name: Completion time 
      run: |
        echo "DATE1=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        end=$(date +%s)
        seconds=$(( end - start ))
        hour=$(( $seconds/3600 ))
        min=$(( ($seconds-${hour}*3600)/60 ))
        sec=$(( $seconds-${hour}*3600-${min}*60 ))
        HMS=`echo ${hour}:${min}:${sec}`
        echo "time=$HMS" >> $GITHUB_ENV

    - name: Telegram or Push notification
      run: |
        MSG="
        😺 ${{ env.FILE_NAME }} 编译完成
        🔖 开始时间：${{ env.DATE }}
        🔖 完成时间：${{ env.DATE1 }}
        🔖 编译耗时：${{ env.time }}
        ⏱ 时间: ${{ env.date }}
        ⌛ hash: ${{ env.hash }}
        🎁: https://github.com/acnixuil/Snapshot-Lede/releases/tag/${{ env.TAG }}_${{ env.PRODUCT_NAME }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"

# ==============================================
  Cleaning:
    if: ${{ always() }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Delete workflow runs
      uses: Jejz168/delete-workflow-runs@main
      with:
        retain_days: 8
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: Jejz168/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' 
      with:
        keep_latest: 36
        delete_tags: true
        delete_tag_pattern: _ipq60xx
      env:
        GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
