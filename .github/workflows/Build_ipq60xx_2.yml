#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ipq60xx_s

on:
  workflow_dispatch:

#定时触发开始编译
  #schedule:
  #- cron: 0 17 * * 1

env:
  REPO_URL: https://github.com/openwrt-fork/ipq6000.git
  REPO_BRANCH: main
  FEEDS_CONF: ipq6000/feeds.conf.default
  CONFIG_FILE: ipq6000/ssr.config
  DIY_P1_SH: ipq6000/diy-part1.sh
  DIY_P2_SH: ipq6000/diy-part2.sh
  UPLOAD_RELEASE: true
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai
  FIRMWARE_TAG: ipq6000
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检查
      uses: actions/checkout@v4
    
    - name: Apt Update
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        
    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    
    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir      
    
    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        Author=$(git show -s --date=short --format="%an")
        Date=$(git show -s --date=short --format="%ci")
        Commit=$(git show -s --date=short --format="%s")
        Hash=$(git show -s --date=short --format="%H")
        echo "author=$Author" >> $GITHUB_ENV
        echo "date=$Date" >> $GITHUB_ENV
        echo "commit=$Commit" >> $GITHUB_ENV
        echo "hash=$Hash" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV

    - name: 加载软件源
      run: |
        set -x
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default

    - name: 更新软件源
      run: |
        cd openwrt 
        ./scripts/feeds update -a
        ./scripts/feeds install -a -f -p passwall_packages
        ./scripts/feeds install -a -f -p passwall_luci
        ./scripts/feeds install -a
  
    - name: 加载自定义配置
      run: |
        set -x
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 整合固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s || (curl -k --data chat_id="${{ env.TELEGRAM_CHAT_ID }}" --data "text=😅 ${{env.FIRMWARE_TAG}}-OpenWrt 固件编译失败 😅" "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage";exit 1)
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查可用容量
      if: (!cancelled())
      run: df -hT

    - name: 组织文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *kernel*
        rm -rf sha256sums
        rm -rf *rootfs*
        rm -rf profiles.json
        rm -rf *.buildinfo
        rm -rf *package*
        rm -rf *.itb
        rm -rf *.manifest
        sleep 2
        ls
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传到Release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          - 🔖 此为 ${{ env.FIRMWARE_TAG }}_s 固件
          - 🔖 默认IP：192.168.2.1 默认密码：password
          - 🔖 时间: ${{ env.date }}
        artifacts: ${{ env.FIRMWARE }}/*