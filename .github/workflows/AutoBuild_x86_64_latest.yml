#===============================================
# Description: X86_64
# Lisence: MIT
# By：Jejz
#===============================================

name: Build_x86_64_latest

on:
  #schedule:
  #  - cron: '0 22 * * 5'
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x86/x86.config
  DIY_P1_SH: x86/diy-part1.sh
  DIY_P2_SH: x86/diy-part2.sh
  UPDATE_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: x86_64
  PRODUCT_NAME: x86_64

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir     

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        Date=$(git show -s --date=short --format="%ci")
        echo "date=$Date" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 读取配置
      run: |     
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config   
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH       

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s || (curl -k --data chat_id="${{ env.TELEGRAM_CHAT_ID }}" --data "text=😅 ${{env.PRODUCT_NAME}}-OpenWrt 固件编译失败 😅" "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage";exit 1)
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      run: |
        echo "=========================================="
        echo "----------------空间使用-------------------"
        echo "=========================================="
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT
        echo "=========================================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin

    - name: 组织文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        ls
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPDATE_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Delete files
      run: |
        cd openwrt
        bash rename.sh
        Kernel=`grep "_uefi.img.gz" wget/open_dev_md5 | cut -d - -f 2 | cut -d _ -f 2 `
        echo "KERNEL=$Kernel" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.delete_files.outputs.status == 'success'
      with:
        name: ${{ env.DATE }} "immortalwrt_${{ env.FILE_NAME }}_${{ env.KERNEL }}" Firmware
        allowUpdates: true
        tag: ${{ env.TAG }}_${{ env.KERNEL }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          - 🔖 immortalwrt_${{ env.FILE_NAME }}_${{ env.KERNEL }} Firmware
          - 🔖 Default IP: 192.168.3.1 Default Password: None
          - 🔖 Time: ${{ env.date }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Completion time 
      run: |
        echo "DATE1=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        end=$(date +%s)
        seconds=$(( end - start ))
        hour=$(( $seconds/3600 ))
        min=$(( ($seconds-${hour}*3600)/60 ))
        sec=$(( $seconds-${hour}*3600-${min}*60 ))
        HMS=`echo ${hour}:${min}:${sec}`
        echo "time=$HMS" >> $GITHUB_ENV

    - name: Telegram or Push notification
      run: |
        MSG="
        😺 ${{ env.FILE_NAME }}_${{ env.KERNEL }} 编译完成
        🔖 开始时间：${{ env.DATE }}
        🔖 完成时间：${{ env.DATE1 }}
        🔖 编译耗时：${{ env.time }}
        ⏱ 时间: ${{ env.date }}
        🎁: https://github.com/acnixuil/Snapshot-Lede/releases/tag/${{ env.TAG }}_${{ env.KERNEL }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"

  Cleaning:
    if: ${{ always() }}
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Jejz168/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: Jejz168/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' 
        with:
          keep_latest: 10
          delete_tags: true
          delete_tag_pattern: _
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}