name: n1-fw4

on:
  workflow_dispatch:
  # schedule:
  #   - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  CONFIG_FILE: n1/n1-fw4.config
  CUSTOM_SCRIPT: n1/custom.sh
  CACHE_TOOLCHAIN: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: N1
  TZ: Asia/Shanghai
  CLASH_KERNEL: arm64

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Free Disk Space
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: >
          android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* 
          libgl1* lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* 
          php* postgresql* powershell* snap* temurin* yarn* zulu*
        remove_packages_one_command: true
        remove_folders: >
          /etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* 
          /usr/lib/llvm* /usr/lib/mono* /usr/local/lib/android* /usr/local/lib/node_modules* 
          /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* 
          /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* 
          /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* 
          /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* 
          /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift 
          /var/lib/mysql* /var/log/azure*
        testing: false

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $CUSTOM_SCRIPT
        cd $OPENWRT_PATH/package/
        $GITHUB_WORKSPACE/scripts/Packages.sh
        $GITHUB_WORKSPACE/scripts/Handles.sh
        $GITHUB_WORKSPACE/$CUSTOM_SCRIPT

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      run: |
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        ls $OPENWRT_PATH/bin/targets/*/*

    - name: Package OpenWrt Firmware
      uses: ophub/flippy-openwrt-actions@main
      env:
        SCRIPT_REPO_URL: acnixuil/openwrt_packit
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*immortalwrt-armsr-armv8-generic-rootfs.tar.gz
        PACKAGE_SOC: s905d
        WHOAMI: Coldfish
        DISTRIB_REVISION: ${OPENWRT_VER} (By @Coldfish build $(TZ=UTC-8 date "+%Y-%m-%d %H:%M"))
        KERNEL_VERSION_NAME: 6.6.y
        SCRIPT_DIY_PATH: n1/mk_s905d_n1.sh
        KERNEL_AUTO_LATEST: true
        GZIP_IMGS: .gz
        ENABLE_WIFI_K504: 0
        ENABLE_WIFI_K510: 0

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz