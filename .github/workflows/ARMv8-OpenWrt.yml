#===============================================
# Description: ARMv8 OpenWrt
# Lisence: MIT
# By：Jejz
#===============================================

name: ARMv8 OpenWrt快速打包

on:
  workflow_dispatch:
  #schedule:
    #- cron: '45 22 * * *'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: n1/feeds.conf.default
  CONFIG_FILE: n1/n1.config
  DIY_SCRIPT1: n1/1.sh
  DIY_SCRIPT2: n1/2.sh
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  FIRMWARE_TAG: ARMv8

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get update
        sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/compile-kernel/tools/script/ubuntu2204-make-openwrt-depends)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main
         
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        Author=$(git show -s --date=short --format="Author: %an")
        Date=$(git show -s --date=short --format="date: %ci")
        Commit=$(git show -s --date=short --format="commit: %s")
        Hash=$(git show -s --date=short --format="commit hash: %h")
        echo "author=$Author" >> $GITHUB_ENV
        echo "date=$Date" >> $GITHUB_ENV
        echo "commit=$Commit" >> $GITHUB_ENV
        echo "hash=$Hash" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Install Feeds
      run: |
        chmod +x $DIY_SCRIPT1
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT1
        ./scripts/feeds update -a                  
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $DIY_SCRIPT2
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT2
        $GITHUB_WORKSPACE/scripts/preset-adguard-core.sh $CLASH_KERNEL

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Package Armvirt as OpenWrt
      if: (!cancelled())
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: s905d
        WHOAMI: Happy
        DISTRIB_REVISION: ${OPENWRT_VER} (By @Happy build $(TZ=UTC-8 date "+%Y-%m-%d %H:%M"))
        KERNEL_VERSION_NAME: 6.6.y
        KERNEL_AUTO_LATEST: true
        GZIP_IMGS: .gz
        ENABLE_WIFI_K504: 0
        ENABLE_WIFI_K510: 0

    - name: 组织文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd /opt/openwrt_packit/output
        rm -rf *rootfs*
        rm -rf sha256sums
        sleep 2
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
   
    - name: Upload artifact to Actions
      uses: kittaakos/upload-artifact-as-is@master
      if: env.PACKAGED_STATUS == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        path: ${{ env.PACKAGED_OUTPUTPATH }}/

    - name: Upload OpenWrt Firmware to Release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: ${{ env.DATE }} 「 ${{ env.FIRMWARE_TAG }} 」固件
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          - 默认 IP：192.168.2.254 默认密码：password
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        
    - name: Completion time 
      run: |
        echo "DATE1=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        end=$(date +%s)
        seconds=$(( end - start ))
        hour=$(( $seconds/3600 ))
        min=$(( ($seconds-${hour}*3600)/60 ))
        sec=$(( $seconds-${hour}*3600-${min}*60 ))
        HMS=`echo ${hour}:${min}:${sec}`
        echo "time=$HMS" >> $GITHUB_ENV
        
    - name: Telegram notification upload success
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ${{ env.PRODUCT_NAME }}打包完成
          开始时间：${{ env.DATE }}
          完成时间：${{ env.DATE1 }}
          编译耗时：${{ env.time }}
          🌐: https://github.com/acnixuil/AutoBuild_OP/releases/tag/ARMv8