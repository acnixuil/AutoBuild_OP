#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: AutoBuild_x86_64_imm

on:
  workflow_dispatch:

# Schedule to trigger compilation
  schedule:
    - cron: '0 22 * * 5'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x86_imm/x86.config
  DIY_P1_SH: x86_imm/diy-part1.sh
  DIY_P2_SH: x86_imm/diy-part2.sh
  UPDATE_FIRMWARE: true
  UPLOAD_RELEASE: true
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai
  FILE_NAME: x86_64
  PRODUCT_NAME: x86_64

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check
      uses: actions/checkout@v4
    
    - name: Check Server Status
      run: |
        echo "Warning‚ö†"
        echo "If the assigned server performance is insufficient, be sure to cancel and run again!"
        echo "Known successful compilation CPU models: 8370C, 8171M"
        echo "Known underperforming CPU model: 8272CL"
        echo -e "-------------- ------------CPU Information------------------------------------------\n"
        echo "Physical CPUs: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
        echo -e "CPU Core and Version Information: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------Memory Information-------------------------------------------"
        echo "Installed memory details:"
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "--------------------------Disk Information---------------------------------------------"
        echo -e  "Number of disks: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "Disk Details:"
        echo " System Space       Type   Total  Used  Available  Usage"
        df -Th
    
    - name: Install Compilation Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir      
    
    - name: Download Source Code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        Date=$(git show -s --date=short --format="%ci")
        echo "date=$Date" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV

    - name: Load Software Sources
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update Software Sources
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install Software Sources
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Output Pre-Compilation Information
      run: |
        cd openwrt
        echo " System Space       Type  Total  Used  Available  Usage"
        df -hT $PWD
        echo
        echo "=========================================="
        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/ /g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "    " $0}' Plug-2 > Plug-in
        echo
        echo
        echo "Selected Plugin List"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}
        echo
        echo "=========================================="
        echo
        echo
        echo "Output Complete Plugin Information..."
        echo
        echo
        cat .config

    - name: Download Packages
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s || (curl -k --data chat_id="${{ env.TELEGRAM_CHAT_ID }}" --data "text=üòÖ ${{env.PRODUCT_NAME}}-OpenWrt Firmware Compilation Failed üòÖ" "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage";exit 1)
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check Available Capacity
      if: (!cancelled())
      run: df -hT

    - name: Organize Files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        ls
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPDATE_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Delete Files
      run: |
        cd openwrt
        bash rename.sh
        Kernel=`grep "_uefi.img.gz" wget/open_dev_md5 | cut -d - -f 2 | cut -d _ -f 2 `
        echo "KERNEL=$Kernel" >> $GITHUB_ENV

    - name: Generate Tag
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: ${{ env.DATE }} "immortalwrt_${{ env.FILE_NAME }}_${{ env.KERNEL }}" Firmware
        allowUpdates: true
        tag: ${{ env.TAG }}_${{ env.PRODUCT_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          - üîñ immortalwrt_${{ env.FILE_NAME }}_${{ env.KERNEL }} Firmware
          - üîñ Default IP: 192.168.3.1 Default Password: None
          - üîñ Time: ${{ env.date }}
        artifacts: ${{ env.FIRMWARE }}/*
        
    - name: Completion Time 
      run: |
        echo "DATE1=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        end=$(date +%s)
        seconds=$(( end - start ))
        hour=$(( $seconds/3600 ))
        min=$(( ($seconds-${hour}*3600)/60 ))
        sec=$(( $seconds-${hour}*3600-${min}*60 ))
        HMS=`echo ${hour}:${min}:${sec}`
        echo "time=$HMS" >> $GITHUB_ENV

    - name: Telegram or Push Notification
      run: |
        MSG="
        üò∫ immortalwrt_${{ env.FILE_NAME }}_${{ env.KERNEL }} Compilation Completed
        üîñ Start Time: ${{ env.DATE }}
        üîñ Completion Time: ${{ env.DATE1 }}
        üîñ Compilation Time: ${{ env.time }}
        ‚è± Time: ${{ env.date }}
        üéÅ: https://github.com/acnixuil/Snapshot-Lede/releases/tag/${{ env.TAG }}_${{ env.PRODUCT_NAME }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"

# ==============================================
  Cleaning:
    if: ${{ always() }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Delete Workflow Runs
      uses: Jejz168/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove Old Releases
      uses: Jejz168/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' 
      with:
        keep_latest: 10
        delete_tags: true
        delete_tag_pattern: _
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}